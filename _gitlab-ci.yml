variables:
  SPRING_PROFILES_ACTIVE: ci

before_script:
  - chmod +x ./gradlew
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan gitlab.ixi.com >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts
  - git config --global user.email "vgeorgiou@trading-point.com"
  - git config --global user.name "Viktor Georgiou"
  - export SNAPSHOT_VERSION=`./gradlew properties -q | grep "version:" | awk '{print $2}'`
  - export RELEASE_VERSION=${SNAPSHOT_VERSION%-SNAPSHOT}
stages:
  - build
  - test
  - release
  - deploy

gradle-build:
  stage: build
  script: "./gradlew assemble -x test"
  artifacts:
    paths:
      - build/libs/*.jar
  except:
    - tags

gradle-test:
  stage: test
  script: "./gradlew test"
  except:
    - tags

docker-release:
  stage: release
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build --pull -t $CI_REGISTRY_IMAGE:$RELEASE_VERSION -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE
    - git remote set-url origin $(echo $CI_REPOSITORY_URL | perl -pe 's#.*@(.+?(\:\d+)?)/#git@\1:#')
    - git checkout -B "$CI_BUILD_REF_NAME"
    - git tag -a ${RELEASE_VERSION} -m "tagging release ${RELEASE_VERSION}"
    - git push origin ${RELEASE_VERSION}
    - ./gradlew updateVersion
    - export SNAPSHOT_VERSION=`./gradlew properties -q | grep "version:" | awk '{print $2}'`
    - git config --global push.default simple
    - git commit -am "Updating repo for ${SNAPSHOT_VERSION} development [skip ci]"
    - git push
  only:
    - master

deploy-to-test:
  stage: deploy
  variables:
    DOCKER_HOST: tcp://${TEST_HOST}:2375
  script:
    - export SPRING_PROFILES_ACTIVE=test
    - export RELEASE_IMAGE=${CI_REGISTRY_IMAGE}:${RELEASE_VERSION}
    - docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY
    - docker stack deploy --with-registry-auth --compose-file=docker-compose.yml $STACK_NAME
  environment:
    name: test
  only:
    - master

deploy-to-prod:
  stage: deploy
  script:
    - echo "Deploy to production..."
  environment:
    name: production
  when: manual
  only:
  - master